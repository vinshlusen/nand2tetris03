// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	// we load the correct RAM8 with the "load" input, all other RAM8 load's will be set to 0 automatically by Dmux8Way.
	
	DMux8Way(in = load, sel = address[3..5], a = loadRam0, b = loadRam1, c = loadRam2, d = loadRam3, e = loadRam4, f =loadRam5, g = loadRam6, h = loadRam7);
	
	// 8 RAM8's. Since 7 of the 8 RAM8's have their load set to 0 they will just output their respective address[0..2] Regsiter contents. The RAM8
	// whose load was set to RAM64's load through the Dmux8Way, will either load a the new value (RAM64's in) or output the value of its address[0..2]
	// register.

	RAM8(in = in, load = loadRam0 , address = address[0..2],out = outRam0);
	RAM8(in = in, load = loadRam1 , address = address[0..2],out = outRam1);
	RAM8(in = in, load = loadRam2 , address = address[0..2],out = outRam2);
	RAM8(in = in, load = loadRam3 , address = address[0..2],out = outRam3);
	RAM8(in = in, load = loadRam4 , address = address[0..2],out = outRam4);
	RAM8(in = in, load = loadRam5 , address = address[0..2],out = outRam5);
	RAM8(in = in, load = loadRam6 , address = address[0..2],out = outRam6);
	RAM8(in = in, load = loadRam7 , address = address[0..2],out = outRam7);
	
	// output the content of the Register of the appropriate RAM8 described in the address input
	Mux8Way16(a = outRam0, b = outRam1, c = outRam2, d = outRam3, e = outRam4, f = outRam5, g = outRam6, h = outRam7, sel = address[3..5], out = out);
	
}